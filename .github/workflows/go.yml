name: Publish new Release

on:
  push:
    tags:
      - "v*"
    branches:
      - "hjp/*"

jobs:
  # test:
  #   name: Test
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Set up Go 1.15
  #       uses: actions/setup-go@v1
  #       with:
  #         go-version: 1.15
  #       id: go
  #     - name: Check out code into the Go module directory
  #       uses: actions/checkout@v1
  #     - name: Get dependencies
  #       run: |
  #         go get -v -t -d ./...
  #     - name: Check that can be compiled
  #       run: go build -v cmd/streamtester/streamtester.go

  # create_release:
  #   name: Create Release
  #   runs-on: ubuntu-latest
  #   needs: test
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@master
  #     - name: Create Release
  #       id: create_release
  #       uses: actions/create-release@v1
  #       env:
  #         GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       with:
  #         tag_name: ${{ github.ref }}
  #         release_name: Release ${{ github.ref }}
  #         body: |
  #           Release ${{ github.ref }}
  #         draft: false
  #         prerelease: false

  build:
    name: Build
    # runs-on: ubuntu-latest
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - macos-latest
          - windows-latest
          - ubuntu-latest
    # needs: create_release
    steps:
      - name: Set up Go 1.17
        uses: actions/setup-go@v1
        with:
          go-version: 1.17
        id: go
      - name: Check out code into the Go module directory
        uses: actions/checkout@v1
      - name: Get dependencies
        run: |
          go get -v -t -d ./...
      - name: Build
        run: |
          for arch in arm64 amd64
          do
            GOARCH="$arch" make all GO_BUILD_DIR="build/${RUNNER_OS}/${arch}/"
          done

      - name: Compress Posix
        if: matrix.os != 'windows-latest'
        run: |
          for arch in arm64 amd64
          do
            cd "build/${RUNNER_OS}/${arch}"
            for file in $(find . -type f -perm -a+x)
            do
              f_name="$(basename $file)"
              mv "${f_name}" "livepeer-${f_name}"
              tar -czf "livepeer-${f_name}-${RUNNER_OS}-${arch}.tar.gz" "livepeer-${f_name}"
            done
            cd -
          done
          ls -lhR build/

      - name: Compress Windows
        if: matrix.os == 'windows-latest'
        run: |
          for arch in arm64 amd64
          do
            cd "build/${RUNNER_OS}/${arch}"
            for file in $(find . -type f -perm -a+x)
            do
              f_name="$(basename $file)"
              mv "${f_name}" "livepeer-${f_name}"
              7z a "livepeer-${f_name/.exe//}-${RUNNER_OS}-${arch}.zip" "livepeer-${f_name}"
            done
            cd -
          done
          ls -lhR build/

      # - name: Release Posix
      #   uses: softprops/action-gh-release@v1
      #   # if: startsWith(github.ref, 'refs/tags/')
      #   if: matrix.os != 'windows-latest'
      #   with:
      #     files: |
      #       streamtester.${{runner.os}}.gz
      #       loadtester.${{runner.os}}.gz
      #       recordtester.${{runner.os}}.gz
      #       lapi.${{runner.os}}.gz
      #       mapi.${{runner.os}}.gz
      #       testdriver.${{runner.os}}.gz
      #       mist-api-connector.${{runner.os}}.gz
      #     # body_path: ${{ github.workflow }}-CHANGELOG.txt
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Release Windows
      #   uses: softprops/action-gh-release@v1
      #   if: matrix.os == 'windows-latest'
      #   with:
      #     files:
      #       streamtester.${{runner.os}}.zip
      #       # body_path: ${{ github.workflow }}-CHANGELOG.txt
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
